
03.HAL_GetTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002588  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08002778  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  08002784  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08002784  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008513  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001846  00000000  00000000  0002859a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e60  00000000  00000000  00029de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab2  00000000  00000000  0002ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001f81e  00000000  00000000  0002b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009b1f  00000000  00000000  0004af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb981  00000000  00000000  00054a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003a30  00000000  00000000  001203b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  00123de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080026ac 	.word	0x080026ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080026ac 	.word	0x080026ac

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:

/*
 * 이 펌웨어는 LED 는 100ms, LED2 는 500ms, LED_BLE 는 1000ms 마다 점멸한다.
 */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0

  HAL_Init();
 80001b6:	f000 f9b7 	bl	8000528 <HAL_Init>
  SystemClock_Config();
 80001ba:	f000 f83b 	bl	8000234 <SystemClock_Config>
  PeriphCommonClock_Config();
 80001be:	f000 f895 	bl	80002ec <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80001c2:	f000 f8b1 	bl	8000328 <MX_GPIO_Init>

  uint32_t led_pre_time = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  uint32_t led2_pre_time = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
  uint32_t led_ble_pre_time = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]

  while (1)
  {
  	if (HAL_GetTick() - led_pre_time >= 100)
 80001d2:	f000 fa17 	bl	8000604 <HAL_GetTick>
 80001d6:	4602      	mov	r2, r0
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	2b63      	cmp	r3, #99	; 0x63
 80001de:	d906      	bls.n	80001ee <main+0x3e>
  	{
  		led_pre_time = HAL_GetTick();
 80001e0:	f000 fa10 	bl	8000604 <HAL_GetTick>
 80001e4:	60f8      	str	r0, [r7, #12]
  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	4811      	ldr	r0, [pc, #68]	; (8000230 <main+0x80>)
 80001ea:	f000 fc8f 	bl	8000b0c <HAL_GPIO_TogglePin>
  	}
  	if (HAL_GetTick() - led2_pre_time >= 500)
 80001ee:	f000 fa09 	bl	8000604 <HAL_GetTick>
 80001f2:	4602      	mov	r2, r0
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	1ad3      	subs	r3, r2, r3
 80001f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001fc:	d307      	bcc.n	800020e <main+0x5e>
		{
  		led2_pre_time = HAL_GetTick();
 80001fe:	f000 fa01 	bl	8000604 <HAL_GetTick>
 8000202:	60b8      	str	r0, [r7, #8]
  		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4809      	ldr	r0, [pc, #36]	; (8000230 <main+0x80>)
 800020a:	f000 fc7f 	bl	8000b0c <HAL_GPIO_TogglePin>
		}
  	if (HAL_GetTick() - led_ble_pre_time >= 1000)
 800020e:	f000 f9f9 	bl	8000604 <HAL_GetTick>
 8000212:	4602      	mov	r2, r0
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad3      	subs	r3, r2, r3
 8000218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800021c:	d3d9      	bcc.n	80001d2 <main+0x22>
  	{
  		led_ble_pre_time = HAL_GetTick();
 800021e:	f000 f9f1 	bl	8000604 <HAL_GetTick>
 8000222:	6078      	str	r0, [r7, #4]
  		HAL_GPIO_TogglePin(LED_BLE_GPIO_Port, LED_BLE_Pin);
 8000224:	2110      	movs	r1, #16
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f000 fc6f 	bl	8000b0c <HAL_GPIO_TogglePin>
  	if (HAL_GetTick() - led_pre_time >= 100)
 800022e:	e7d0      	b.n	80001d2 <main+0x22>
 8000230:	48000800 	.word	0x48000800

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b09a      	sub	sp, #104	; 0x68
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	2248      	movs	r2, #72	; 0x48
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fa06 	bl	8002654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <SystemClock_Config+0xb4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000262:	4a21      	ldr	r2, [pc, #132]	; (80002e8 <SystemClock_Config+0xb4>)
 8000264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <SystemClock_Config+0xb4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000276:	2323      	movs	r3, #35	; 0x23
 8000278:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2340      	movs	r3, #64	; 0x40
 800028c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800028e:	2300      	movs	r3, #0
 8000290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000292:	23a0      	movs	r3, #160	; 0xa0
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0320 	add.w	r3, r7, #32
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 ffca 	bl	8001238 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002aa:	f000 f87b 	bl	80003a4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002ae:	236f      	movs	r3, #111	; 0x6f
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2101      	movs	r1, #1
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fb26 	bl	8001920 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002da:	f000 f863 	bl	80003a4 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3768      	adds	r7, #104	; 0x68
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	58000400 	.word	0x58000400

080002ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	; 0x50
 80002f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002f2:	463b      	mov	r3, r7
 80002f4:	2250      	movs	r2, #80	; 0x50
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 f9ab 	bl	8002654 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000302:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000304:	2300      	movs	r3, #0
 8000306:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000308:	2310      	movs	r3, #16
 800030a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f001 ff19 	bl	8002146 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800031a:	f000 f843 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	; 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	2004      	movs	r0, #4
 800033e:	f7ff ff1d 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ff1a 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000350:	f000 fbc4 	bl	8000adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLE_GPIO_Port, LED_BLE_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fbbe 	bl	8000adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED_Pin;
 8000360:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000364:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	480a      	ldr	r0, [pc, #40]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000378:	f000 fa40 	bl	80007fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_BLE_Pin;
 800037c:	2310      	movs	r3, #16
 800037e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLE_GPIO_Port, &GPIO_InitStruct);
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 fa32 	bl	80007fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	48000800 	.word	0x48000800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>

080003ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000408:	f000 f8e8 	bl	80005dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}

08000410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <SystemInit+0x98>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041a:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <SystemInit+0x98>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000438:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800043c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800043e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <SystemInit+0x9c>)
 800044a:	4013      	ands	r3, r2
 800044c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800044e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045a:	f023 0305 	bic.w	r3, r3, #5
 800045e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800046a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <SystemInit+0xa0>)
 800047c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800047e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <SystemInit+0xa0>)
 8000484:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	faf6fefb 	.word	0xfaf6fefb
 80004b0:	22041000 	.word	0x22041000

080004b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80004b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b8:	3304      	adds	r3, #4

080004ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80004be:	d3f9      	bcc.n	80004b4 <CopyDataInit>
  bx lr
 80004c0:	4770      	bx	lr

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80004c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004c4:	3004      	adds	r0, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>
  bx lr
 80004ca:	4770      	bx	lr

080004cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d0:	f7ff ff9e 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <LoopForever+0x6>)
 80004d6:	490c      	ldr	r1, [pc, #48]	; (8000508 <LoopForever+0xa>)
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <LoopForever+0xe>)
 80004da:	2300      	movs	r3, #0
 80004dc:	f7ff ffed 	bl	80004ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <LoopForever+0x12>)
 80004e2:	490c      	ldr	r1, [pc, #48]	; (8000514 <LoopForever+0x16>)
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <LoopForever+0x1a>)
 80004e6:	2300      	movs	r3, #0
 80004e8:	f7ff ffe7 	bl	80004ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopForever+0x1e>)
 80004ee:	490c      	ldr	r1, [pc, #48]	; (8000520 <LoopForever+0x22>)
 80004f0:	2300      	movs	r3, #0
 80004f2:	f7ff ffe8 	bl	80004c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f002 f8b5 	bl	8002664 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004fa:	f7ff fe59 	bl	80001b0 <main>

080004fe <LoopForever>:

LoopForever:
  b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000504:	20000008 	.word	0x20000008
 8000508:	20000014 	.word	0x20000014
 800050c:	08002778 	.word	0x08002778
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000510:	20030000 	.word	0x20030000
 8000514:	20030000 	.word	0x20030000
 8000518:	08002784 	.word	0x08002784
  INIT_BSS _sbss, _ebss
 800051c:	20000014 	.word	0x20000014
 8000520:	20000034 	.word	0x20000034

08000524 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_Init+0x3c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_Init+0x3c>)
 8000538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f92a 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000544:	200f      	movs	r0, #15
 8000546:	f000 f80f 	bl	8000568 <HAL_InitTick>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	e001      	b.n	800055a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000556:	f7ff ff2a 	bl	80003ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800055a:	79fb      	ldrb	r3, [r7, #7]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	58004000 	.word	0x58004000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_InitTick+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d024      	beq.n	80005c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800057c:	f001 fb7e 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8000580:	4602      	mov	r2, r0
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_InitTick+0x6c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f924 	bl	80007e2 <HAL_SYSTICK_Config>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10f      	bne.n	80005c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d809      	bhi.n	80005ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a6:	2200      	movs	r2, #0
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	f04f 30ff 	mov.w	r0, #4294967295
 80005ae:	f000 f8fe 	bl	80007ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <HAL_InitTick+0x70>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	e007      	b.n	80005ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e004      	b.n	80005ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e001      	b.n	80005ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000010 	.word	0x20000010
 80005d8:	2000000c 	.word	0x2000000c

080005dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_IncTick+0x24>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000010 	.word	0x20000010
 8000600:	20000030 	.word	0x20000030

08000604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GetTick+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000030 	.word	0x20000030

0800061c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_GetTickPrio+0x14>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2000000c 	.word	0x2000000c

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff47 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff5e 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb2 	bl	8000754 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e14c      	b.n	8000aa6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 813e 	beq.w	8000aa0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	2b01      	cmp	r3, #1
 800082e:	d005      	beq.n	800083c <HAL_GPIO_Init+0x40>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	2b02      	cmp	r3, #2
 800083a:	d130      	bne.n	800089e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000872:	2201      	movs	r2, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	f003 0201 	and.w	r2, r3, #1
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d017      	beq.n	80008da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d123      	bne.n	800092e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	08da      	lsrs	r2, r3, #3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3208      	adds	r2, #8
 80008ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	220f      	movs	r2, #15
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	691a      	ldr	r2, [r3, #16]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	6939      	ldr	r1, [r7, #16]
 800092a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 0203 	and.w	r2, r3, #3
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8098 	beq.w	8000aa0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000970:	4a54      	ldr	r2, [pc, #336]	; (8000ac4 <HAL_GPIO_Init+0x2c8>)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	3302      	adds	r3, #2
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	220f      	movs	r2, #15
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800099a:	d019      	beq.n	80009d0 <HAL_GPIO_Init+0x1d4>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a4a      	ldr	r2, [pc, #296]	; (8000ac8 <HAL_GPIO_Init+0x2cc>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d013      	beq.n	80009cc <HAL_GPIO_Init+0x1d0>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a49      	ldr	r2, [pc, #292]	; (8000acc <HAL_GPIO_Init+0x2d0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d00d      	beq.n	80009c8 <HAL_GPIO_Init+0x1cc>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <HAL_GPIO_Init+0x2d4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d007      	beq.n	80009c4 <HAL_GPIO_Init+0x1c8>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <HAL_GPIO_Init+0x2d8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d101      	bne.n	80009c0 <HAL_GPIO_Init+0x1c4>
 80009bc:	2304      	movs	r3, #4
 80009be:	e008      	b.n	80009d2 <HAL_GPIO_Init+0x1d6>
 80009c0:	2307      	movs	r3, #7
 80009c2:	e006      	b.n	80009d2 <HAL_GPIO_Init+0x1d6>
 80009c4:	2303      	movs	r3, #3
 80009c6:	e004      	b.n	80009d2 <HAL_GPIO_Init+0x1d6>
 80009c8:	2302      	movs	r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x1d6>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <HAL_GPIO_Init+0x1d6>
 80009d0:	2300      	movs	r3, #0
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	f002 0203 	and.w	r2, r2, #3
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	4093      	lsls	r3, r2
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e2:	4938      	ldr	r1, [pc, #224]	; (8000ac4 <HAL_GPIO_Init+0x2c8>)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3302      	adds	r3, #2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a14:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_GPIO_Init+0x2dc>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f aeab 	bne.w	800080c <HAL_GPIO_Init+0x10>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40010000 	.word	0x40010000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	48001000 	.word	0x48001000
 8000ad8:	58000800 	.word	0x58000800

08000adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000af2:	887a      	ldrh	r2, [r7, #2]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	041a      	lsls	r2, r3, #16
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43d9      	mvns	r1, r3
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	58000400 	.word	0x58000400

08000b60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	58000400 	.word	0x58000400

08000b7c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b8e:	d101      	bne.n	8000b94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd0:	6013      	str	r3, [r2, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bee:	d101      	bne.n	8000bf4 <LL_RCC_HSE_IsReady+0x18>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <LL_RCC_HSE_IsReady+0x1a>
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4e:	d101      	bne.n	8000c54 <LL_RCC_HSI_IsReady+0x18>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <LL_RCC_HSI_IsReady+0x1a>
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	061b      	lsls	r3, r3, #24
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d101      	bne.n	8000ce6 <LL_RCC_HSI48_IsReady+0x18>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <LL_RCC_HSI48_IsReady+0x1a>
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d68:	f023 0304 	bic.w	r3, r3, #4
 8000d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d101      	bne.n	8000d92 <LL_RCC_LSE_IsReady+0x18>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <LL_RCC_LSE_IsReady+0x1a>
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d101      	bne.n	8000dfa <LL_RCC_LSI1_IsReady+0x18>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_RCC_LSI1_IsReady+0x1a>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d101      	bne.n	8000e62 <LL_RCC_LSI2_IsReady+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_RCC_LSI2_IsReady+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d101      	bne.n	8000eee <LL_RCC_MSI_IsReady+0x16>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <LL_RCC_MSI_IsReady+0x18>
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2bb0      	cmp	r3, #176	; 0xb0
 8000f38:	d901      	bls.n	8000f3e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f3a:	23b0      	movs	r3, #176	; 0xb0
 8000f3c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f023 0203 	bic.w	r2, r3, #3
 8000f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800101a:	f023 020f 	bic.w	r2, r3, #15
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001026:	4313      	orrs	r3, r2
 8001028:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	608b      	str	r3, [r1, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	608b      	str	r3, [r1, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800110a:	d101      	bne.n	8001110 <LL_RCC_PLL_IsReady+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_RCC_PLL_IsReady+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0303 	and.w	r3, r3, #3
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d101      	bne.n	8001196 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011b6:	d101      	bne.n	80011bc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d101      	bne.n	80011e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80011f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001200:	d101      	bne.n	8001206 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001224:	d101      	bne.n	800122a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b08d      	sub	sp, #52	; 0x34
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e363      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 808d 	beq.w	8001372 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001258:	f7ff fea1 	bl	8000f9e <LL_RCC_GetSysClkSource>
 800125c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	f7ff ff82 	bl	8001166 <LL_RCC_PLL_GetMainSource>
 8001262:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x3e>
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d147      	bne.n	8001300 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	2b01      	cmp	r3, #1
 8001274:	d144      	bne.n	8001300 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e347      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001286:	f7ff fe4c 	bl	8000f22 <LL_RCC_MSI_GetRange>
 800128a:	4603      	mov	r3, r0
 800128c:	429c      	cmp	r4, r3
 800128e:	d914      	bls.n	80012ba <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fd05 	bl	8001ca4 <RCC_SetFlashLatencyFromMSIRange>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e336      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe26 	bl	8000efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe4a 	bl	8000f4c <LL_RCC_MSI_SetCalibTrimming>
 80012b8:	e013      	b.n	80012e2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe1b 	bl	8000efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe3f 	bl	8000f4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fce6 	bl	8001ca4 <RCC_SetFlashLatencyFromMSIRange>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e317      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012e2:	f000 fccb 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4aa4      	ldr	r2, [pc, #656]	; (800157c <HAL_RCC_OscConfig+0x344>)
 80012ea:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012ec:	4ba4      	ldr	r3, [pc, #656]	; (8001580 <HAL_RCC_OscConfig+0x348>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f939 	bl	8000568 <HAL_InitTick>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d039      	beq.n	8001370 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e308      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01e      	beq.n	8001346 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	f7ff fdc8 	bl	8000e9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130c:	f7ff f97a 	bl	8000604 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff f976 	bl	8000604 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2f5      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001326:	f7ff fdd7 	bl	8000ed8 <LL_RCC_MSI_IsReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f1      	beq.n	8001314 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fde0 	bl	8000efa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe04 	bl	8000f4c <LL_RCC_MSI_SetCalibTrimming>
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001346:	f7ff fdb8 	bl	8000eba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134a:	f7ff f95b 	bl	8000604 <HAL_GetTick>
 800134e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001352:	f7ff f957 	bl	8000604 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e2d6      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001364:	f7ff fdb8 	bl	8000ed8 <LL_RCC_MSI_IsReady>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f1      	bne.n	8001352 <HAL_RCC_OscConfig+0x11a>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001370:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d047      	beq.n	800140e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137e:	f7ff fe0e 	bl	8000f9e <LL_RCC_GetSysClkSource>
 8001382:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001384:	f7ff feef 	bl	8001166 <LL_RCC_PLL_GetMainSource>
 8001388:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d005      	beq.n	800139c <HAL_RCC_OscConfig+0x164>
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d134      	bne.n	800140e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e2b4      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d102      	bne.n	80013b8 <HAL_RCC_OscConfig+0x180>
 80013b2:	f7ff fbf5 	bl	8000ba0 <LL_RCC_HSE_Enable>
 80013b6:	e001      	b.n	80013bc <HAL_RCC_OscConfig+0x184>
 80013b8:	f7ff fc01 	bl	8000bbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d012      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff f91e 	bl	8000604 <HAL_GetTick>
 80013c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff f91a 	bl	8000604 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e299      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80013de:	f7ff fbfd 	bl	8000bdc <LL_RCC_HSE_IsReady>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x194>
 80013e8:	e011      	b.n	800140e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff f90b 	bl	8000604 <HAL_GetTick>
 80013ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f2:	f7ff f907 	bl	8000604 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b64      	cmp	r3, #100	; 0x64
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e286      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001404:	f7ff fbea 	bl	8000bdc <LL_RCC_HSE_IsReady>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f1      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d04c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141a:	f7ff fdc0 	bl	8000f9e <LL_RCC_GetSysClkSource>
 800141e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	f7ff fea1 	bl	8001166 <LL_RCC_PLL_GetMainSource>
 8001424:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d005      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d10e      	bne.n	8001450 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e266      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fc09 	bl	8000c60 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800144e:	e031      	b.n	80014b4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d019      	beq.n	800148c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	f7ff fbd2 	bl	8000c00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff f8d2 	bl	8000604 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff f8ce 	bl	8000604 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e24d      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001476:	f7ff fbe1 	bl	8000c3c <LL_RCC_HSI_IsReady>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f1      	beq.n	8001464 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fbeb 	bl	8000c60 <LL_RCC_HSI_SetCalibTrimming>
 800148a:	e013      	b.n	80014b4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	f7ff fbc7 	bl	8000c1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff f8b8 	bl	8000604 <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff f8b4 	bl	8000604 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e233      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014aa:	f7ff fbc7 	bl	8000c3c <LL_RCC_HSI_IsReady>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f1      	bne.n	8001498 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a3 	beq.w	8001614 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d076      	beq.n	80015c4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d046      	beq.n	8001570 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80014e2:	f7ff fc7e 	bl	8000de2 <LL_RCC_LSI1_IsReady>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d113      	bne.n	8001514 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80014ec:	f7ff fc57 	bl	8000d9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014f0:	f7ff f888 	bl	8000604 <HAL_GetTick>
 80014f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80014f8:	f7ff f884 	bl	8000604 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e203      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800150a:	f7ff fc6a 	bl	8000de2 <LL_RCC_LSI1_IsReady>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f1      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001514:	f7ff fc77 	bl	8000e06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff f874 	bl	8000604 <HAL_GetTick>
 800151c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001520:	f7ff f870 	bl	8000604 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b03      	cmp	r3, #3
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1ef      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001532:	f7ff fc8a 	bl	8000e4a <LL_RCC_LSI2_IsReady>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f1      	beq.n	8001520 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc94 	bl	8000e6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001546:	f7ff fc3b 	bl	8000dc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff f85b 	bl	8000604 <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001552:	f7ff f857 	bl	8000604 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1d6      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001564:	f7ff fc3d 	bl	8000de2 <LL_RCC_LSI1_IsReady>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x31a>
 800156e:	e051      	b.n	8001614 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001570:	f7ff fc15 	bl	8000d9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff f846 	bl	8000604 <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800157a:	e00c      	b.n	8001596 <HAL_RCC_OscConfig+0x35e>
 800157c:	20000008 	.word	0x20000008
 8001580:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001584:	f7ff f83e 	bl	8000604 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1bd      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001596:	f7ff fc24 	bl	8000de2 <LL_RCC_LSI1_IsReady>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f1      	beq.n	8001584 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80015a0:	f7ff fc42 	bl	8000e28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015a6:	f7ff f82d 	bl	8000604 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1ac      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015b8:	f7ff fc47 	bl	8000e4a <LL_RCC_LSI2_IsReady>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f1      	bne.n	80015a6 <HAL_RCC_OscConfig+0x36e>
 80015c2:	e027      	b.n	8001614 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80015c4:	f7ff fc30 	bl	8000e28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff f81c 	bl	8000604 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015d0:	f7ff f818 	bl	8000604 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e197      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015e2:	f7ff fc32 	bl	8000e4a <LL_RCC_LSI2_IsReady>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f1      	bne.n	80015d0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80015ec:	f7ff fbe8 	bl	8000dc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff f808 	bl	8000604 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015f8:	f7ff f804 	bl	8000604 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e183      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800160a:	f7ff fbea 	bl	8000de2 <LL_RCC_LSI1_IsReady>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f1      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d05b      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	4ba7      	ldr	r3, [pc, #668]	; (80018c0 <HAL_RCC_OscConfig+0x688>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d114      	bne.n	8001656 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800162c:	f7ff fa88 	bl	8000b40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001630:	f7fe ffe8 	bl	8000604 <HAL_GetTick>
 8001634:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7fe ffe4 	bl	8000604 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e163      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164a:	4b9d      	ldr	r3, [pc, #628]	; (80018c0 <HAL_RCC_OscConfig+0x688>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x42c>
 800165e:	f7ff fb48 	bl	8000cf2 <LL_RCC_LSE_Enable>
 8001662:	e00c      	b.n	800167e <HAL_RCC_OscConfig+0x446>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d104      	bne.n	8001676 <HAL_RCC_OscConfig+0x43e>
 800166c:	f7ff fb63 	bl	8000d36 <LL_RCC_LSE_EnableBypass>
 8001670:	f7ff fb3f 	bl	8000cf2 <LL_RCC_LSE_Enable>
 8001674:	e003      	b.n	800167e <HAL_RCC_OscConfig+0x446>
 8001676:	f7ff fb4d 	bl	8000d14 <LL_RCC_LSE_Disable>
 800167a:	f7ff fb6d 	bl	8000d58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d014      	beq.n	80016b0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7fe ffbd 	bl	8000604 <HAL_GetTick>
 800168a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7fe ffb9 	bl	8000604 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e136      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80016a4:	f7ff fb69 	bl	8000d7a <LL_RCC_LSE_IsReady>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ef      	beq.n	800168e <HAL_RCC_OscConfig+0x456>
 80016ae:	e013      	b.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7fe ffa8 	bl	8000604 <HAL_GetTick>
 80016b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7fe ffa4 	bl	8000604 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e121      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80016ce:	f7ff fb54 	bl	8000d7a <LL_RCC_LSE_IsReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ef      	bne.n	80016b8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02c      	beq.n	800173e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ec:	f7ff facd 	bl	8000c8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7fe ff88 	bl	8000604 <HAL_GetTick>
 80016f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f8:	f7fe ff84 	bl	8000604 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e103      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800170a:	f7ff fae0 	bl	8000cce <LL_RCC_HSI48_IsReady>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f1      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4c0>
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001716:	f7ff fac9 	bl	8000cac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7fe ff73 	bl	8000604 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001722:	f7fe ff6f 	bl	8000604 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0ee      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001734:	f7ff facb 	bl	8000cce <LL_RCC_HSI48_IsReady>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f1      	bne.n	8001722 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80e4 	beq.w	8001910 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001748:	f7ff fc29 	bl	8000f9e <LL_RCC_GetSysClkSource>
 800174c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	2b02      	cmp	r3, #2
 800175c:	f040 80b4 	bne.w	80018c8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0203 	and.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	429a      	cmp	r2, r3
 800176c:	d123      	bne.n	80017b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d11c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d114      	bne.n	80017b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d10d      	bne.n	80017b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d05d      	beq.n	8001872 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d058      	beq.n	800186e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0a1      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017ce:	f7ff fc84 	bl	80010da <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d2:	f7fe ff17 	bl	8000604 <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7fe ff13 	bl	8000604 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e092      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_RCC_OscConfig+0x68c>)
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001812:	0212      	lsls	r2, r2, #8
 8001814:	4311      	orrs	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001820:	4311      	orrs	r1, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001826:	430a      	orrs	r2, r1
 8001828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001830:	f7ff fc44 	bl	80010bc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001842:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001844:	f7fe fede 	bl	8000604 <HAL_GetTick>
 8001848:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe feda 	bl	8000604 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e059      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ef      	beq.n	800184c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186c:	e050      	b.n	8001910 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e04f      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d147      	bne.n	8001910 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001880:	f7ff fc1c 	bl	80010bc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001894:	f7fe feb6 	bl	8000604 <HAL_GetTick>
 8001898:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7fe feb2 	bl	8000604 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e031      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x664>
 80018bc:	e028      	b.n	8001910 <HAL_RCC_OscConfig+0x6d8>
 80018be:	bf00      	nop
 80018c0:	58000400 	.word	0x58000400
 80018c4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d01e      	beq.n	800190c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	f7ff fc04 	bl	80010da <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7fe fe97 	bl	8000604 <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7fe fe93 	bl	8000604 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e012      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ef      	bne.n	80018da <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_OscConfig+0x6e4>)
 8001906:	4013      	ands	r3, r2
 8001908:	60cb      	str	r3, [r1, #12]
 800190a:	e001      	b.n	8001910 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3734      	adds	r7, #52	; 0x34
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	eefefffc 	.word	0xeefefffc

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e12d      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b98      	ldr	r3, [pc, #608]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d91b      	bls.n	800197a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4993      	ldr	r1, [pc, #588]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001952:	f7fe fe57 	bl	8000604 <HAL_GetTick>
 8001956:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001958:	e008      	b.n	800196c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800195a:	f7fe fe53 	bl	8000604 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e111      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d1ef      	bne.n	800195a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb13 	bl	8000fb6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001990:	f7fe fe38 	bl	8000604 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001998:	f7fe fe34 	bl	8000604 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0f2      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019aa:	f7ff fbe8 	bl	800117e <LL_RCC_IsActiveFlag_HPRE>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f1      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb0a 	bl	8000fde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ca:	f7fe fe1b 	bl	8000604 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019d2:	f7fe fe17 	bl	8000604 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0d5      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019e4:	f7ff fbdd 	bl	80011a2 <LL_RCC_IsActiveFlag_C2HPRE>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f1      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fb03 	bl	800100a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a04:	f7fe fdfe 	bl	8000604 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a0c:	f7fe fdfa 	bl	8000604 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0b8      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a1e:	f7ff fbd3 	bl	80011c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f1      	beq.n	8001a0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d016      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fafd 	bl	8001038 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a3e:	f7fe fde1 	bl	8000604 <HAL_GetTick>
 8001a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a46:	f7fe fddd 	bl	8000604 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e09b      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a58:	f7ff fbc9 	bl	80011ee <LL_RCC_IsActiveFlag_PPRE1>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f1      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d017      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff faf3 	bl	8001060 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a7a:	f7fe fdc3 	bl	8000604 <HAL_GetTick>
 8001a7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a82:	f7fe fdbf 	bl	8000604 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e07d      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a94:	f7ff fbbd 	bl	8001212 <LL_RCC_IsActiveFlag_PPRE2>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f1      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d043      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ab2:	f7ff f893 	bl	8000bdc <LL_RCC_HSE_IsReady>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11e      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e067      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ac8:	f7ff fb16 	bl	80010f8 <LL_RCC_PLL_IsReady>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d113      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e05c      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ade:	f7ff f9fb 	bl	8000ed8 <LL_RCC_MSI_IsReady>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d108      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e051      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001aec:	f7ff f8a6 	bl	8000c3c <LL_RCC_HSI_IsReady>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e04a      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fa39 	bl	8000f76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b04:	f7fe fd7e 	bl	8000604 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7fe fd7a 	bl	8000604 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e036      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	f7ff fa3c 	bl	8000f9e <LL_RCC_GetSysClkSource>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d1ec      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d21b      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 0207 	bic.w	r2, r3, #7
 8001b48:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b50:	f7fe fd58 	bl	8000604 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b58:	f7fe fd54 	bl	8000604 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e012      	b.n	8001b90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x278>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ef      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b78:	f000 f880 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_RCC_ClockConfig+0x27c>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001b82:	f7fe fd4b 	bl	800061c <HAL_GetTickPrio>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fced 	bl	8000568 <HAL_InitTick>
 8001b8e:	4603      	mov	r3, r0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	58004000 	.word	0x58004000
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	f7ff f9fa 	bl	8000f9e <LL_RCC_GetSysClkSource>
 8001baa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bb2:	f7ff f9b6 	bl	8000f22 <LL_RCC_MSI_GetRange>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e04b      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e045      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bda:	f7fe ffcf 	bl	8000b7c <LL_RCC_HSE_IsEnabledDiv2>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e03a      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e037      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001bf0:	f7ff fab9 	bl	8001166 <LL_RCC_PLL_GetMainSource>
 8001bf4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x64>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x6a>
 8001c02:	e00d      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c06:	60bb      	str	r3, [r7, #8]
        break;
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c0a:	f7fe ffb7 	bl	8000b7c <LL_RCC_HSE_IsEnabledDiv2>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c16:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c18:	e00d      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c1c:	60bb      	str	r3, [r7, #8]
        break;
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c20:	f7ff f97f 	bl	8000f22 <LL_RCC_MSI_GetRange>
 8001c24:	4603      	mov	r3, r0
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	60bb      	str	r3, [r7, #8]
        break;
 8001c34:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001c36:	f7ff fa71 	bl	800111c <LL_RCC_PLL_GetN>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	fb03 f402 	mul.w	r4, r3, r2
 8001c42:	f7ff fa84 	bl	800114e <LL_RCC_PLL_GetDivider>
 8001c46:	4603      	mov	r3, r0
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c50:	f7ff fa71 	bl	8001136 <LL_RCC_PLL_GetR>
 8001c54:	4603      	mov	r3, r0
 8001c56:	0f5b      	lsrs	r3, r3, #29
 8001c58:	3301      	adds	r3, #1
 8001c5a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c5e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08002730 	.word	0x08002730
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	003d0900 	.word	0x003d0900
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b598      	push	{r3, r4, r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c80:	f7ff ff8e 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001c84:	4604      	mov	r4, r0
 8001c86:	f7ff f9ff 	bl	8001088 <LL_RCC_GetAHBPrescaler>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd98      	pop	{r3, r4, r7, pc}
 8001ca0:	080026f0 	.word	0x080026f0

08001ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2bb0      	cmp	r3, #176	; 0xb0
 8001cb0:	d903      	bls.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e007      	b.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001cca:	f7ff f9e9 	bl	80010a0 <LL_RCC_GetAHB4Prescaler>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9c      	lsrs	r4, r3, #18
 8001cee:	f7fe ff37 	bl	8000b60 <HAL_PWREx_GetVoltageRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f000 f80c 	bl	8001d14 <RCC_SetFlashLatency>
 8001cfc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	08002730 	.word	0x08002730
 8001d0c:	080026f0 	.word	0x080026f0
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b093      	sub	sp, #76	; 0x4c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <RCC_SetFlashLatency+0xe8>)
 8001d20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001d2a:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <RCC_SetFlashLatency+0xec>)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001d36:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <RCC_SetFlashLatency+0xf0>)
 8001d38:	f107 040c 	add.w	r4, r7, #12
 8001d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d42:	2300      	movs	r3, #0
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d11a      	bne.n	8001d84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	643b      	str	r3, [r7, #64]	; 0x40
 8001d52:	e013      	b.n	8001d7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3348      	adds	r3, #72	; 0x48
 8001d5a:	443b      	add	r3, r7
 8001d5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d807      	bhi.n	8001d76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3348      	adds	r3, #72	; 0x48
 8001d6c:	443b      	add	r3, r7
 8001d6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001d74:	e020      	b.n	8001db8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	3301      	adds	r3, #1
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d9e8      	bls.n	8001d54 <RCC_SetFlashLatency+0x40>
 8001d82:	e019      	b.n	8001db8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d88:	e013      	b.n	8001db2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3348      	adds	r3, #72	; 0x48
 8001d90:	443b      	add	r3, r7
 8001d92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d807      	bhi.n	8001dac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3348      	adds	r3, #72	; 0x48
 8001da2:	443b      	add	r3, r7
 8001da4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001daa:	e005      	b.n	8001db8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	3301      	adds	r3, #1
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d9e8      	bls.n	8001d8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <RCC_SetFlashLatency+0xf4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	4911      	ldr	r1, [pc, #68]	; (8001e08 <RCC_SetFlashLatency+0xf4>)
 8001dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001dc8:	f7fe fc1c 	bl	8000604 <HAL_GetTick>
 8001dcc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dce:	e008      	b.n	8001de2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001dd0:	f7fe fc18 	bl	8000604 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e007      	b.n	8001df2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <RCC_SetFlashLatency+0xf4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1ef      	bne.n	8001dd0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	374c      	adds	r7, #76	; 0x4c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	080026c4 	.word	0x080026c4
 8001e00:	080026d4 	.word	0x080026d4
 8001e04:	080026e0 	.word	0x080026e0
 8001e08:	58004000 	.word	0x58004000

08001e0c <LL_RCC_LSE_IsEnabled>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <LL_RCC_LSE_IsEnabled+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_RCC_LSE_IsEnabled+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_LSE_IsReady>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d101      	bne.n	8001e48 <LL_RCC_LSE_IsReady+0x18>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_RCC_LSE_IsReady+0x1a>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_SetRFWKPClockSource>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_SetSMPSClockSource>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_RCC_SetSMPSPrescaler>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_RCC_SetUSARTClockSource>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0203 	bic.w	r2, r3, #3
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_SetLPUARTClockSource>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_SetI2CClockSource>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_RCC_SetLPTIMClockSource>:
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_SetSAIClockSource>:
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_SetRNGClockSource>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_RCC_SetCLK48ClockSource>:
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_RCC_SetUSBClockSource>:
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffe3 	bl	8001fee <LL_RCC_SetCLK48ClockSource>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <LL_RCC_SetADCClockSource>:
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_SetRTCClockSource>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_GetRTCClockSource>:
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_RCC_ForceBackupDomainReset>:
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_PLLSAI1_Enable>:
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_PLLSAI1_Disable>:
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_RCC_PLLSAI1_IsReady>:
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002134:	d101      	bne.n	800213a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b088      	sub	sp, #32
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800214e:	2300      	movs	r3, #0
 8002150:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002152:	2300      	movs	r3, #0
 8002154:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216a:	d021      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800216c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002170:	d81b      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002176:	d01d      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217c:	d815      	bhi.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d110      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002198:	e00d      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f947 	bl	8002432 <RCCEx_PLLSAI1_ConfigNP>
 80021a4:	4603      	mov	r3, r0
 80021a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80021a8:	e005      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	77fb      	strb	r3, [r7, #31]
        break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fee8 	bl	8001f96 <LL_RCC_SetSAIClockSource>
 80021c6:	e001      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d046      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80021d8:	f7ff ff56 	bl	8002088 <LL_RCC_GetRTCClockSource>
 80021dc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d03c      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021e8:	f7fe fcaa 	bl	8000b40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff30 	bl	800205c <LL_RCC_SetRTCClockSource>
 80021fc:	e02e      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002208:	f7ff ff4b 	bl	80020a2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800220c:	f7ff ff5a 	bl	80020c4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800221e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002228:	f7ff fdf0 	bl	8001e0c <LL_RCC_LSE_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d114      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002232:	f7fe f9e7 	bl	8000604 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe f9e3 	bl	8000604 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	77fb      	strb	r3, [r7, #31]
              break;
 8002250:	e004      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002252:	f7ff fded 	bl	8001e30 <LL_RCC_LSE_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d1ee      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	77bb      	strb	r3, [r7, #30]
 8002260:	e001      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fe2a 	bl	8001ed0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe35 	bl	8001efc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fe5d 	bl	8001f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe52 	bl	8001f62 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fe2a 	bl	8001f28 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fe1f 	bl	8001f28 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d022      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe8d 	bl	800201a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002308:	d107      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002318:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002322:	d10b      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f8dd 	bl	80024e8 <RCCEx_PLLSAI1_ConfigNQ>
 800232e:	4603      	mov	r3, r0
 8002330:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002338:	7ffb      	ldrb	r3, [r7, #31]
 800233a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02b      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235a:	d003      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe2a 	bl	8001fc2 <LL_RCC_SetRNGClockSource>
 800236e:	e00a      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fe21 	bl	8001fc2 <LL_RCC_SetRNGClockSource>
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fe34 	bl	8001fee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800238e:	d107      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d022      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fe3d 	bl	8002030 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023be:	d107      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d8:	d10b      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f8dd 	bl	800259e <RCCEx_PLLSAI1_ConfigNR>
 80023e4:	4603      	mov	r3, r0
 80023e6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80023ee:	7ffb      	ldrb	r3, [r7, #31]
 80023f0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fd26 	bl	8001e54 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fd45 	bl	8001ea8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd2c 	bl	8001e80 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002428:	7fbb      	ldrb	r3, [r7, #30]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800243e:	f7ff fe61 	bl	8002104 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002442:	f7fe f8df 	bl	8000604 <HAL_GetTick>
 8002446:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002448:	e009      	b.n	800245e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800244a:	f7fe f8db 	bl	8000604 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d902      	bls.n	800245e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e004      	b.n	8002468 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800245e:	f7ff fe60 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d137      	bne.n	80024de <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002498:	4313      	orrs	r3, r2
 800249a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800249c:	f7ff fe23 	bl	80020e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe f8b0 	bl	8000604 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a8:	f7fe f8ac 	bl	8000604 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ba:	e004      	b.n	80024c6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024bc:	f7ff fe31 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1f0      	bne.n	80024a8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d108      	bne.n	80024de <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024f4:	f7ff fe06 	bl	8002104 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024f8:	f7fe f884 	bl	8000604 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024fe:	e009      	b.n	8002514 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002500:	f7fe f880 	bl	8000604 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	73fb      	strb	r3, [r7, #15]
      break;
 8002512:	e004      	b.n	800251e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002514:	f7ff fe05 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d137      	bne.n	8002594 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002538:	4313      	orrs	r3, r2
 800253a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800254e:	4313      	orrs	r3, r2
 8002550:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002552:	f7ff fdc8 	bl	80020e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002556:	f7fe f855 	bl	8000604 <HAL_GetTick>
 800255a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800255c:	e009      	b.n	8002572 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255e:	f7fe f851 	bl	8000604 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d902      	bls.n	8002572 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	73fb      	strb	r3, [r7, #15]
        break;
 8002570:	e004      	b.n	800257c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002572:	f7ff fdd6 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d1f0      	bne.n	800255e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002590:	4313      	orrs	r3, r2
 8002592:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80025aa:	f7ff fdab 	bl	8002104 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025ae:	f7fe f829 	bl	8000604 <HAL_GetTick>
 80025b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025b4:	e009      	b.n	80025ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b6:	f7fe f825 	bl	8000604 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d902      	bls.n	80025ca <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e004      	b.n	80025d4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025ca:	f7ff fdaa 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d137      	bne.n	800264a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ee:	4313      	orrs	r3, r2
 80025f0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002604:	4313      	orrs	r3, r2
 8002606:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002608:	f7ff fd6d 	bl	80020e6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fd fffa 	bl	8000604 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002612:	e009      	b.n	8002628 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002614:	f7fd fff6 	bl	8000604 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
        break;
 8002626:	e004      	b.n	8002632 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002628:	f7ff fd7b 	bl	8002122 <LL_RCC_PLLSAI1_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d1f0      	bne.n	8002614 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <memset>:
 8002654:	4402      	add	r2, r0
 8002656:	4603      	mov	r3, r0
 8002658:	4293      	cmp	r3, r2
 800265a:	d100      	bne.n	800265e <memset+0xa>
 800265c:	4770      	bx	lr
 800265e:	f803 1b01 	strb.w	r1, [r3], #1
 8002662:	e7f9      	b.n	8002658 <memset+0x4>

08002664 <__libc_init_array>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	4d0d      	ldr	r5, [pc, #52]	; (800269c <__libc_init_array+0x38>)
 8002668:	4c0d      	ldr	r4, [pc, #52]	; (80026a0 <__libc_init_array+0x3c>)
 800266a:	1b64      	subs	r4, r4, r5
 800266c:	10a4      	asrs	r4, r4, #2
 800266e:	2600      	movs	r6, #0
 8002670:	42a6      	cmp	r6, r4
 8002672:	d109      	bne.n	8002688 <__libc_init_array+0x24>
 8002674:	4d0b      	ldr	r5, [pc, #44]	; (80026a4 <__libc_init_array+0x40>)
 8002676:	4c0c      	ldr	r4, [pc, #48]	; (80026a8 <__libc_init_array+0x44>)
 8002678:	f000 f818 	bl	80026ac <_init>
 800267c:	1b64      	subs	r4, r4, r5
 800267e:	10a4      	asrs	r4, r4, #2
 8002680:	2600      	movs	r6, #0
 8002682:	42a6      	cmp	r6, r4
 8002684:	d105      	bne.n	8002692 <__libc_init_array+0x2e>
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	f855 3b04 	ldr.w	r3, [r5], #4
 800268c:	4798      	blx	r3
 800268e:	3601      	adds	r6, #1
 8002690:	e7ee      	b.n	8002670 <__libc_init_array+0xc>
 8002692:	f855 3b04 	ldr.w	r3, [r5], #4
 8002696:	4798      	blx	r3
 8002698:	3601      	adds	r6, #1
 800269a:	e7f2      	b.n	8002682 <__libc_init_array+0x1e>
 800269c:	08002770 	.word	0x08002770
 80026a0:	08002770 	.word	0x08002770
 80026a4:	08002770 	.word	0x08002770
 80026a8:	08002774 	.word	0x08002774

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
