
01.HAL_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  0800277c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  08002788  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08002788  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   000084f2  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001841  00000000  00000000  00028579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e60  00000000  00000000  00029dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab1  00000000  00000000  0002ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001f81e  00000000  00000000  0002b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009b03  00000000  00000000  0004aeef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb953  00000000  00000000  000549f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003a2c  00000000  00000000  00120348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  00123d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080026b0 	.word	0x080026b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080026b0 	.word	0x080026b0

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:

/*
 * 이 펌웨어는 LED 3개를 500ms 마다 점멸한다. (HAL_Delay())
 */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0

  HAL_Init();
 80001b4:	f000 f996 	bl	80004e4 <HAL_Init>
  SystemClock_Config();
 80001b8:	f000 f81a 	bl	80001f0 <SystemClock_Config>
  PeriphCommonClock_Config();
 80001bc:	f000 f874 	bl	80002a8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80001c0:	f000 f890 	bl	80002e4 <MX_GPIO_Init>

  while (1)
  {
  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001c4:	2140      	movs	r1, #64	; 0x40
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <main+0x3c>)
 80001c8:	f000 fca2 	bl	8000b10 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4806      	ldr	r0, [pc, #24]	; (80001ec <main+0x3c>)
 80001d2:	f000 fc9d 	bl	8000b10 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(LED_BLE_GPIO_Port, LED_BLE_Pin);
 80001d6:	2110      	movs	r1, #16
 80001d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001dc:	f000 fc98 	bl	8000b10 <HAL_GPIO_TogglePin>
  	HAL_Delay(500);
 80001e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e4:	f000 fa04 	bl	80005f0 <HAL_Delay>
  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001e8:	e7ec      	b.n	80001c4 <main+0x14>
 80001ea:	bf00      	nop
 80001ec:	48000800 	.word	0x48000800

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b09a      	sub	sp, #104	; 0x68
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0320 	add.w	r3, r7, #32
 80001fa:	2248      	movs	r2, #72	; 0x48
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fa2a 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]
 8000212:	615a      	str	r2, [r3, #20]
 8000214:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000216:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <SystemClock_Config+0xb4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800021e:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <SystemClock_Config+0xb4>)
 8000220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000224:	6013      	str	r3, [r2, #0]
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <SystemClock_Config+0xb4>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000232:	2323      	movs	r3, #35	; 0x23
 8000234:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2340      	movs	r3, #64	; 0x40
 8000248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800024a:	2300      	movs	r3, #0
 800024c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800024e:	2360      	movs	r3, #96	; 0x60
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0320 	add.w	r3, r7, #32
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ffee 	bl	800123c <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000266:	f000 f87b 	bl	8000360 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800026a:	236f      	movs	r3, #111	; 0x6f
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb4a 	bl	8001924 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000296:	f000 f863 	bl	8000360 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3768      	adds	r7, #104	; 0x68
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	58000400 	.word	0x58000400

080002a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2250      	movs	r2, #80	; 0x50
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 f9cf 	bl	8002658 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002c4:	2310      	movs	r3, #16
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 ff3d 	bl	800214a <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002d6:	f000 f843 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	; 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	2004      	movs	r0, #4
 80002fa:	f7ff ff3f 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	2001      	movs	r0, #1
 8000300:	f7ff ff3c 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800030a:	4814      	ldr	r0, [pc, #80]	; (800035c <MX_GPIO_Init+0x78>)
 800030c:	f000 fbe8 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLE_GPIO_Port, LED_BLE_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2110      	movs	r1, #16
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 fbe2 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED_Pin;
 800031c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	480a      	ldr	r0, [pc, #40]	; (800035c <MX_GPIO_Init+0x78>)
 8000334:	f000 fa64 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLE_Pin */
  GPIO_InitStruct.Pin = LED_BLE_Pin;
 8000338:	2310      	movs	r3, #16
 800033a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_BLE_GPIO_Port, &GPIO_InitStruct);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 fa56 	bl	8000800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000800 	.word	0x48000800

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	e7fe      	b.n	8000368 <Error_Handler+0x8>

0800036a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800037c:	e7fe      	b.n	800037c <NMI_Handler+0x4>

0800037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <HardFault_Handler+0x4>

08000384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <MemManage_Handler+0x4>

0800038a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <BusFault_Handler+0x4>

08000390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <UsageFault_Handler+0x4>

08000396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c4:	f000 f8e8 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <SystemInit+0x98>)
 80003d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003d6:	4a23      	ldr	r2, [pc, #140]	; (8000464 <SystemInit+0x98>)
 80003d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80003f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80003f8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80003fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <SystemInit+0x9c>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800040a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800040e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000416:	f023 0305 	bic.w	r3, r3, #5
 800041a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800041e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000436:	4a0d      	ldr	r2, [pc, #52]	; (800046c <SystemInit+0xa0>)
 8000438:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800043a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <SystemInit+0xa0>)
 8000440:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800044c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	2200      	movs	r2, #0
 8000458:	619a      	str	r2, [r3, #24]
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	faf6fefb 	.word	0xfaf6fefb
 800046c:	22041000 	.word	0x22041000

08000470 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000470:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000472:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000474:	3304      	adds	r3, #4

08000476 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000476:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000478:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800047a:	d3f9      	bcc.n	8000470 <CopyDataInit>
  bx lr
 800047c:	4770      	bx	lr

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800047e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000480:	3004      	adds	r0, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000482:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>
  bx lr
 8000486:	4770      	bx	lr

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f7ff ff9e 	bl	80003cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <LoopForever+0x6>)
 8000492:	490c      	ldr	r1, [pc, #48]	; (80004c4 <LoopForever+0xa>)
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <LoopForever+0xe>)
 8000496:	2300      	movs	r3, #0
 8000498:	f7ff ffed 	bl	8000476 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <LoopForever+0x12>)
 800049e:	490c      	ldr	r1, [pc, #48]	; (80004d0 <LoopForever+0x16>)
 80004a0:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <LoopForever+0x1a>)
 80004a2:	2300      	movs	r3, #0
 80004a4:	f7ff ffe7 	bl	8000476 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <LoopForever+0x1e>)
 80004aa:	490c      	ldr	r1, [pc, #48]	; (80004dc <LoopForever+0x22>)
 80004ac:	2300      	movs	r3, #0
 80004ae:	f7ff ffe8 	bl	8000482 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f002 f8d9 	bl	8002668 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004b6:	f7ff fe7b 	bl	80001b0 <main>

080004ba <LoopForever>:

LoopForever:
  b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000014 	.word	0x20000014
 80004c8:	0800277c 	.word	0x0800277c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80004cc:	20030000 	.word	0x20030000
 80004d0:	20030000 	.word	0x20030000
 80004d4:	08002788 	.word	0x08002788
  INIT_BSS _sbss, _ebss
 80004d8:	20000014 	.word	0x20000014
 80004dc:	20000034 	.word	0x20000034

080004e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_IRQHandler>
	...

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_Init+0x3c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_Init+0x3c>)
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fa:	2003      	movs	r0, #3
 80004fc:	f000 f94e 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000500:	200f      	movs	r0, #15
 8000502:	f000 f80f 	bl	8000524 <HAL_InitTick>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800050c:	2301      	movs	r3, #1
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	e001      	b.n	8000516 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000512:	f7ff ff2a 	bl	800036a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000516:	79fb      	ldrb	r3, [r7, #7]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	58004000 	.word	0x58004000

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <HAL_InitTick+0x6c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d024      	beq.n	8000582 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000538:	f001 fba2 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 800053c:	4602      	mov	r2, r0
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <HAL_InitTick+0x6c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	fbb3 f3f1 	udiv	r3, r3, r1
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f948 	bl	80007e6 <HAL_SYSTICK_Config>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d10f      	bne.n	800057c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	d809      	bhi.n	8000576 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000562:	2200      	movs	r2, #0
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	f04f 30ff 	mov.w	r0, #4294967295
 800056a:	f000 f922 	bl	80007b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <HAL_InitTick+0x70>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	e007      	b.n	8000586 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e004      	b.n	8000586 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e001      	b.n	8000586 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000010 	.word	0x20000010
 8000594:	2000000c 	.word	0x2000000c

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000010 	.word	0x20000010
 80005bc:	20000030 	.word	0x20000030

080005c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <HAL_GetTick+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000030 	.word	0x20000030

080005d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <HAL_GetTickPrio+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff ffe2 	bl	80005c0 <HAL_GetTick>
 80005fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000608:	d005      	beq.n	8000616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_Delay+0x44>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	bf00      	nop
 8000618:	f7ff ffd2 	bl	80005c0 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d8f7      	bhi.n	8000618 <HAL_Delay+0x28>
  {
  }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000010 	.word	0x20000010

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff47 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff5e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5f 	bl	800069c <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffb2 	bl	8000758 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e14c      	b.n	8000aaa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 813e 	beq.w	8000aa4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	2b01      	cmp	r3, #1
 8000832:	d005      	beq.n	8000840 <HAL_GPIO_Init+0x40>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	2b02      	cmp	r3, #2
 800083e:	d130      	bne.n	80008a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	2203      	movs	r2, #3
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000876:	2201      	movs	r2, #1
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	f003 0201 	and.w	r2, r3, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d017      	beq.n	80008de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d123      	bne.n	8000932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	691a      	ldr	r2, [r3, #16]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	6939      	ldr	r1, [r7, #16]
 800092e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0203 	and.w	r2, r3, #3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 8098 	beq.w	8000aa4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000974:	4a54      	ldr	r2, [pc, #336]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800099e:	d019      	beq.n	80009d4 <HAL_GPIO_Init+0x1d4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d013      	beq.n	80009d0 <HAL_GPIO_Init+0x1d0>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a49      	ldr	r2, [pc, #292]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00d      	beq.n	80009cc <HAL_GPIO_Init+0x1cc>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a48      	ldr	r2, [pc, #288]	; (8000ad4 <HAL_GPIO_Init+0x2d4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x1c8>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a47      	ldr	r2, [pc, #284]	; (8000ad8 <HAL_GPIO_Init+0x2d8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d101      	bne.n	80009c4 <HAL_GPIO_Init+0x1c4>
 80009c0:	2304      	movs	r3, #4
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009c4:	2307      	movs	r3, #7
 80009c6:	e006      	b.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009c8:	2303      	movs	r3, #3
 80009ca:	e004      	b.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009d4:	2300      	movs	r3, #0
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	f002 0203 	and.w	r2, r2, #3
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	4093      	lsls	r3, r2
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e6:	4938      	ldr	r1, [pc, #224]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009f4:	4b39      	ldr	r3, [pc, #228]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a18:	4a30      	ldr	r2, [pc, #192]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a42:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f47f aeab 	bne.w	8000810 <HAL_GPIO_Init+0x10>
  }
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	48000c00 	.word	0x48000c00
 8000ad8:	48001000 	.word	0x48001000
 8000adc:	58000800 	.word	0x58000800

08000ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000afc:	e002      	b.n	8000b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000afe:	887a      	ldrh	r2, [r7, #2]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4013      	ands	r3, r2
 8000b28:	041a      	lsls	r2, r3, #16
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43d9      	mvns	r1, r3
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	400b      	ands	r3, r1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	58000400 	.word	0x58000400

08000b64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	58000400 	.word	0x58000400

08000b80 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b92:	d101      	bne.n	8000b98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bf2:	d101      	bne.n	8000bf8 <LL_RCC_HSE_IsReady+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_RCC_HSE_IsReady+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c34:	6013      	str	r3, [r2, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c52:	d101      	bne.n	8000c58 <LL_RCC_HSI_IsReady+0x18>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <LL_RCC_HSI_IsReady+0x1a>
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	061b      	lsls	r3, r3, #24
 8000c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	604b      	str	r3, [r1, #4]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d101      	bne.n	8000cea <LL_RCC_HSI48_IsReady+0x18>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_RCC_HSI48_IsReady+0x1a>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6c:	f023 0304 	bic.w	r3, r3, #4
 8000d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d101      	bne.n	8000d96 <LL_RCC_LSE_IsReady+0x18>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <LL_RCC_LSE_IsReady+0x1a>
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d101      	bne.n	8000dfe <LL_RCC_LSI1_IsReady+0x18>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_RCC_LSI1_IsReady+0x1a>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d101      	bne.n	8000e66 <LL_RCC_LSI2_IsReady+0x18>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <LL_RCC_LSI2_IsReady+0x1a>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d101      	bne.n	8000ef2 <LL_RCC_MSI_IsReady+0x16>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <LL_RCC_MSI_IsReady+0x18>
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2bb0      	cmp	r3, #176	; 0xb0
 8000f3c:	d901      	bls.n	8000f42 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f3e:	23b0      	movs	r3, #176	; 0xb0
 8000f40:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 0203 	bic.w	r2, r3, #3
 8000f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	608b      	str	r3, [r1, #8]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 030c 	and.w	r3, r3, #12
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	608b      	str	r3, [r1, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800101e:	f023 020f 	bic.w	r2, r3, #15
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102a:	4313      	orrs	r3, r2
 800102c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800104e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010f0:	6013      	str	r3, [r2, #0]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800110e:	d101      	bne.n	8001114 <LL_RCC_PLL_IsReady+0x18>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <LL_RCC_PLL_IsReady+0x1a>
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0303 	and.w	r3, r3, #3
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d101      	bne.n	800119a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011ba:	d101      	bne.n	80011c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d101      	bne.n	80011e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001204:	d101      	bne.n	800120a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001228:	d101      	bne.n	800122e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b08d      	sub	sp, #52	; 0x34
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e363      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 808d 	beq.w	8001376 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125c:	f7ff fea1 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001260:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001262:	f7ff ff82 	bl	800116a <LL_RCC_PLL_GetMainSource>
 8001266:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x3e>
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d147      	bne.n	8001304 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	2b01      	cmp	r3, #1
 8001278:	d144      	bne.n	8001304 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e347      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800128a:	f7ff fe4c 	bl	8000f26 <LL_RCC_MSI_GetRange>
 800128e:	4603      	mov	r3, r0
 8001290:	429c      	cmp	r4, r3
 8001292:	d914      	bls.n	80012be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fd05 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e336      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fe26 	bl	8000efe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe4a 	bl	8000f50 <LL_RCC_MSI_SetCalibTrimming>
 80012bc:	e013      	b.n	80012e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fe1b 	bl	8000efe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe3f 	bl	8000f50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fce6 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e317      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012e6:	f000 fccb 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4aa4      	ldr	r2, [pc, #656]	; (8001580 <HAL_RCC_OscConfig+0x344>)
 80012ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f0:	4ba4      	ldr	r3, [pc, #656]	; (8001584 <HAL_RCC_OscConfig+0x348>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f915 	bl	8000524 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d039      	beq.n	8001374 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e308      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01e      	beq.n	800134a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800130c:	f7ff fdc8 	bl	8000ea0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001310:	f7ff f956 	bl	80005c0 <HAL_GetTick>
 8001314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001318:	f7ff f952 	bl	80005c0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e2f5      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800132a:	f7ff fdd7 	bl	8000edc <LL_RCC_MSI_IsReady>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f1      	beq.n	8001318 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fde0 	bl	8000efe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe04 	bl	8000f50 <LL_RCC_MSI_SetCalibTrimming>
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800134a:	f7ff fdb8 	bl	8000ebe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134e:	f7ff f937 	bl	80005c0 <HAL_GetTick>
 8001352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001356:	f7ff f933 	bl	80005c0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e2d6      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001368:	f7ff fdb8 	bl	8000edc <LL_RCC_MSI_IsReady>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f1      	bne.n	8001356 <HAL_RCC_OscConfig+0x11a>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001374:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d047      	beq.n	8001412 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001382:	f7ff fe0e 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001386:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001388:	f7ff feef 	bl	800116a <LL_RCC_PLL_GetMainSource>
 800138c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x164>
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d108      	bne.n	80013ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d105      	bne.n	80013ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d134      	bne.n	8001412 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2b4      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x180>
 80013b6:	f7ff fbf5 	bl	8000ba4 <LL_RCC_HSE_Enable>
 80013ba:	e001      	b.n	80013c0 <HAL_RCC_OscConfig+0x184>
 80013bc:	f7ff fc01 	bl	8000bc2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d012      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff f8fa 	bl	80005c0 <HAL_GetTick>
 80013cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff f8f6 	bl	80005c0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e299      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80013e2:	f7ff fbfd 	bl	8000be0 <LL_RCC_HSE_IsReady>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f1      	beq.n	80013d0 <HAL_RCC_OscConfig+0x194>
 80013ec:	e011      	b.n	8001412 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff f8e7 	bl	80005c0 <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff f8e3 	bl	80005c0 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e286      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001408:	f7ff fbea 	bl	8000be0 <LL_RCC_HSE_IsReady>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f1      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	f7ff fdc0 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001422:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001424:	f7ff fea1 	bl	800116a <LL_RCC_PLL_GetMainSource>
 8001428:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d10e      	bne.n	8001454 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e266      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fc09 	bl	8000c64 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001452:	e031      	b.n	80014b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d019      	beq.n	8001490 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	f7ff fbd2 	bl	8000c04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff f8ae 	bl	80005c0 <HAL_GetTick>
 8001464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff f8aa 	bl	80005c0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e24d      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800147a:	f7ff fbe1 	bl	8000c40 <LL_RCC_HSI_IsReady>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f1      	beq.n	8001468 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fbeb 	bl	8000c64 <LL_RCC_HSI_SetCalibTrimming>
 800148e:	e013      	b.n	80014b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001490:	f7ff fbc7 	bl	8000c22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff f894 	bl	80005c0 <HAL_GetTick>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff f890 	bl	80005c0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e233      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014ae:	f7ff fbc7 	bl	8000c40 <LL_RCC_HSI_IsReady>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f1      	bne.n	800149c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a3 	beq.w	8001618 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d076      	beq.n	80015c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d046      	beq.n	8001574 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80014e6:	f7ff fc7e 	bl	8000de6 <LL_RCC_LSI1_IsReady>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d113      	bne.n	8001518 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80014f0:	f7ff fc57 	bl	8000da2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014f4:	f7ff f864 	bl	80005c0 <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80014fc:	f7ff f860 	bl	80005c0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e203      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800150e:	f7ff fc6a 	bl	8000de6 <LL_RCC_LSI1_IsReady>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f1      	beq.n	80014fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001518:	f7ff fc77 	bl	8000e0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff f850 	bl	80005c0 <HAL_GetTick>
 8001520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001524:	f7ff f84c 	bl	80005c0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b03      	cmp	r3, #3
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1ef      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001536:	f7ff fc8a 	bl	8000e4e <LL_RCC_LSI2_IsReady>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f1      	beq.n	8001524 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc94 	bl	8000e72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800154a:	f7ff fc3b 	bl	8000dc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff f837 	bl	80005c0 <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001556:	f7ff f833 	bl	80005c0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1d6      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001568:	f7ff fc3d 	bl	8000de6 <LL_RCC_LSI1_IsReady>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f1      	bne.n	8001556 <HAL_RCC_OscConfig+0x31a>
 8001572:	e051      	b.n	8001618 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001574:	f7ff fc15 	bl	8000da2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff f822 	bl	80005c0 <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800157e:	e00c      	b.n	800159a <HAL_RCC_OscConfig+0x35e>
 8001580:	20000008 	.word	0x20000008
 8001584:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001588:	f7ff f81a 	bl	80005c0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1bd      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800159a:	f7ff fc24 	bl	8000de6 <LL_RCC_LSI1_IsReady>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f1      	beq.n	8001588 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80015a4:	f7ff fc42 	bl	8000e2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015aa:	f7ff f809 	bl	80005c0 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1ac      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015bc:	f7ff fc47 	bl	8000e4e <LL_RCC_LSI2_IsReady>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f1      	bne.n	80015aa <HAL_RCC_OscConfig+0x36e>
 80015c6:	e027      	b.n	8001618 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80015c8:	f7ff fc30 	bl	8000e2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7fe fff8 	bl	80005c0 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015d4:	f7fe fff4 	bl	80005c0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e197      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015e6:	f7ff fc32 	bl	8000e4e <LL_RCC_LSI2_IsReady>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f1      	bne.n	80015d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80015f0:	f7ff fbe8 	bl	8000dc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7fe ffe4 	bl	80005c0 <HAL_GetTick>
 80015f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015fc:	f7fe ffe0 	bl	80005c0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e183      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800160e:	f7ff fbea 	bl	8000de6 <LL_RCC_LSI1_IsReady>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f1      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001624:	4ba7      	ldr	r3, [pc, #668]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d114      	bne.n	800165a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001630:	f7ff fa88 	bl	8000b44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001634:	f7fe ffc4 	bl	80005c0 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7fe ffc0 	bl	80005c0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e163      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164e:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <HAL_RCC_OscConfig+0x688>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x42c>
 8001662:	f7ff fb48 	bl	8000cf6 <LL_RCC_LSE_Enable>
 8001666:	e00c      	b.n	8001682 <HAL_RCC_OscConfig+0x446>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d104      	bne.n	800167a <HAL_RCC_OscConfig+0x43e>
 8001670:	f7ff fb63 	bl	8000d3a <LL_RCC_LSE_EnableBypass>
 8001674:	f7ff fb3f 	bl	8000cf6 <LL_RCC_LSE_Enable>
 8001678:	e003      	b.n	8001682 <HAL_RCC_OscConfig+0x446>
 800167a:	f7ff fb4d 	bl	8000d18 <LL_RCC_LSE_Disable>
 800167e:	f7ff fb6d 	bl	8000d5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d014      	beq.n	80016b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7fe ff99 	bl	80005c0 <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7fe ff95 	bl	80005c0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e136      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80016a8:	f7ff fb69 	bl	8000d7e <LL_RCC_LSE_IsReady>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0ef      	beq.n	8001692 <HAL_RCC_OscConfig+0x456>
 80016b2:	e013      	b.n	80016dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7fe ff84 	bl	80005c0 <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7fe ff80 	bl	80005c0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e121      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80016d2:	f7ff fb54 	bl	8000d7e <LL_RCC_LSE_IsReady>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ef      	bne.n	80016bc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d02c      	beq.n	8001742 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f0:	f7ff facd 	bl	8000c8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7fe ff64 	bl	80005c0 <HAL_GetTick>
 80016f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fc:	f7fe ff60 	bl	80005c0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e103      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800170e:	f7ff fae0 	bl	8000cd2 <LL_RCC_HSI48_IsReady>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f1      	beq.n	80016fc <HAL_RCC_OscConfig+0x4c0>
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800171a:	f7ff fac9 	bl	8000cb0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7fe ff4f 	bl	80005c0 <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001726:	f7fe ff4b 	bl	80005c0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0ee      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001738:	f7ff facb 	bl	8000cd2 <LL_RCC_HSI48_IsReady>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f1      	bne.n	8001726 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80e4 	beq.w	8001914 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	f7ff fc29 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001750:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	2b02      	cmp	r3, #2
 8001760:	f040 80b4 	bne.w	80018cc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0203 	and.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	429a      	cmp	r2, r3
 8001770:	d123      	bne.n	80017ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d11c      	bne.n	80017ba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d114      	bne.n	80017ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d05d      	beq.n	8001876 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d058      	beq.n	8001872 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0a1      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017d2:	f7ff fc84 	bl	80010de <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d6:	f7fe fef3 	bl	80005c0 <HAL_GetTick>
 80017da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7fe feef 	bl	80005c0 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e092      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x68c>)
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001816:	0212      	lsls	r2, r2, #8
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800182a:	430a      	orrs	r2, r1
 800182c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001834:	f7ff fc44 	bl	80010c0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001848:	f7fe feba 	bl	80005c0 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7fe feb6 	bl	80005c0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e059      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	e050      	b.n	8001914 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e04f      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d147      	bne.n	8001914 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001884:	f7ff fc1c 	bl	80010c0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001898:	f7fe fe92 	bl	80005c0 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7fe fe8e 	bl	80005c0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e031      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ef      	beq.n	80018a0 <HAL_RCC_OscConfig+0x664>
 80018c0:	e028      	b.n	8001914 <HAL_RCC_OscConfig+0x6d8>
 80018c2:	bf00      	nop
 80018c4:	58000400 	.word	0x58000400
 80018c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d01e      	beq.n	8001910 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	f7ff fc04 	bl	80010de <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7fe fe73 	bl	80005c0 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7fe fe6f 	bl	80005c0 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e012      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ef      	bne.n	80018de <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_OscConfig+0x6e4>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
 800190e:	e001      	b.n	8001914 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3734      	adds	r7, #52	; 0x34
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	eefefffc 	.word	0xeefefffc

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e12d      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d91b      	bls.n	800197e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0207 	bic.w	r2, r3, #7
 800194e:	4993      	ldr	r1, [pc, #588]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001956:	f7fe fe33 	bl	80005c0 <HAL_GetTick>
 800195a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195c:	e008      	b.n	8001970 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800195e:	f7fe fe2f 	bl	80005c0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e111      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001970:	4b8a      	ldr	r3, [pc, #552]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb13 	bl	8000fba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001994:	f7fe fe14 	bl	80005c0 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800199c:	f7fe fe10 	bl	80005c0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0f2      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ae:	f7ff fbe8 	bl	8001182 <LL_RCC_IsActiveFlag_HPRE>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f1      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d016      	beq.n	80019f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb0a 	bl	8000fe2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ce:	f7fe fdf7 	bl	80005c0 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019d6:	f7fe fdf3 	bl	80005c0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0d5      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019e8:	f7ff fbdd 	bl	80011a6 <LL_RCC_IsActiveFlag_C2HPRE>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f1      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fb03 	bl	800100e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a08:	f7fe fdda 	bl	80005c0 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a10:	f7fe fdd6 	bl	80005c0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0b8      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a22:	f7ff fbd3 	bl	80011cc <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f1      	beq.n	8001a10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d016      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fafd 	bl	800103c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a42:	f7fe fdbd 	bl	80005c0 <HAL_GetTick>
 8001a46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a4a:	f7fe fdb9 	bl	80005c0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e09b      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a5c:	f7ff fbc9 	bl	80011f2 <LL_RCC_IsActiveFlag_PPRE1>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f1      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d017      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff faf3 	bl	8001064 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a7e:	f7fe fd9f 	bl	80005c0 <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a86:	f7fe fd9b 	bl	80005c0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e07d      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a98:	f7ff fbbd 	bl	8001216 <LL_RCC_IsActiveFlag_PPRE2>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f1      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d043      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ab6:	f7ff f893 	bl	8000be0 <LL_RCC_HSE_IsReady>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11e      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e067      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001acc:	f7ff fb16 	bl	80010fc <LL_RCC_PLL_IsReady>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d113      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e05c      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ae2:	f7ff f9fb 	bl	8000edc <LL_RCC_MSI_IsReady>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d108      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e051      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001af0:	f7ff f8a6 	bl	8000c40 <LL_RCC_HSI_IsReady>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e04a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fa39 	bl	8000f7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7fe fd5a 	bl	80005c0 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7fe fd56 	bl	80005c0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e036      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	f7ff fa3c 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d1ec      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d21b      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 0207 	bic.w	r2, r3, #7
 8001b4c:	4913      	ldr	r1, [pc, #76]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7fe fd34 	bl	80005c0 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b5c:	f7fe fd30 	bl	80005c0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e012      	b.n	8001b94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x278>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1ef      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b7c:	f000 f880 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_RCC_ClockConfig+0x27c>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001b86:	f7fe fd27 	bl	80005d8 <HAL_GetTickPrio>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcc9 	bl	8000524 <HAL_InitTick>
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58004000 	.word	0x58004000
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	f7ff f9fa 	bl	8000fa2 <LL_RCC_GetSysClkSource>
 8001bae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bb6:	f7ff f9b6 	bl	8000f26 <LL_RCC_MSI_GetRange>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e04b      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e045      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bde:	f7fe ffcf 	bl	8000b80 <LL_RCC_HSE_IsEnabledDiv2>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e03a      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e037      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001bf4:	f7ff fab9 	bl	800116a <LL_RCC_PLL_GetMainSource>
 8001bf8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x64>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x6a>
 8001c06:	e00d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c0a:	60bb      	str	r3, [r7, #8]
        break;
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c0e:	f7fe ffb7 	bl	8000b80 <LL_RCC_HSE_IsEnabledDiv2>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c1a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c1c:	e00d      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c20:	60bb      	str	r3, [r7, #8]
        break;
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c24:	f7ff f97f 	bl	8000f26 <LL_RCC_MSI_GetRange>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	60bb      	str	r3, [r7, #8]
        break;
 8001c38:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001c3a:	f7ff fa71 	bl	8001120 <LL_RCC_PLL_GetN>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	fb03 f402 	mul.w	r4, r3, r2
 8001c46:	f7ff fa84 	bl	8001152 <LL_RCC_PLL_GetDivider>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	3301      	adds	r3, #1
 8001c50:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c54:	f7ff fa71 	bl	800113a <LL_RCC_PLL_GetR>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	0f5b      	lsrs	r3, r3, #29
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c62:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c64:	68fb      	ldr	r3, [r7, #12]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	08002734 	.word	0x08002734
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	003d0900 	.word	0x003d0900
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b598      	push	{r3, r4, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c84:	f7ff ff8e 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	f7ff f9ff 	bl	800108c <LL_RCC_GetAHBPrescaler>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd98      	pop	{r3, r4, r7, pc}
 8001ca4:	080026f4 	.word	0x080026f4

08001ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2bb0      	cmp	r3, #176	; 0xb0
 8001cb4:	d903      	bls.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e007      	b.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001cce:	f7ff f9e9 	bl	80010a4 <LL_RCC_GetAHB4Prescaler>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9c      	lsrs	r4, r3, #18
 8001cf2:	f7fe ff37 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f000 f80c 	bl	8001d18 <RCC_SetFlashLatency>
 8001d00:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08002734 	.word	0x08002734
 8001d10:	080026f4 	.word	0x080026f4
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b093      	sub	sp, #76	; 0x4c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <RCC_SetFlashLatency+0xe8>)
 8001d24:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001d2e:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <RCC_SetFlashLatency+0xec>)
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <RCC_SetFlashLatency+0xf0>)
 8001d3c:	f107 040c 	add.w	r4, r7, #12
 8001d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d46:	2300      	movs	r3, #0
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d50:	d11a      	bne.n	8001d88 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	643b      	str	r3, [r7, #64]	; 0x40
 8001d56:	e013      	b.n	8001d80 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3348      	adds	r3, #72	; 0x48
 8001d5e:	443b      	add	r3, r7
 8001d60:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d807      	bhi.n	8001d7a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3348      	adds	r3, #72	; 0x48
 8001d70:	443b      	add	r3, r7
 8001d72:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001d78:	e020      	b.n	8001dbc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d9e8      	bls.n	8001d58 <RCC_SetFlashLatency+0x40>
 8001d86:	e019      	b.n	8001dbc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8c:	e013      	b.n	8001db6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	3348      	adds	r3, #72	; 0x48
 8001d94:	443b      	add	r3, r7
 8001d96:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d807      	bhi.n	8001db0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	3348      	adds	r3, #72	; 0x48
 8001da6:	443b      	add	r3, r7
 8001da8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001dae:	e005      	b.n	8001dbc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db2:	3301      	adds	r3, #1
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d9e8      	bls.n	8001d8e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <RCC_SetFlashLatency+0xf4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4911      	ldr	r1, [pc, #68]	; (8001e0c <RCC_SetFlashLatency+0xf4>)
 8001dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001dcc:	f7fe fbf8 	bl	80005c0 <HAL_GetTick>
 8001dd0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dd2:	e008      	b.n	8001de6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001dd4:	f7fe fbf4 	bl	80005c0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e007      	b.n	8001df6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <RCC_SetFlashLatency+0xf4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ef      	bne.n	8001dd4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	374c      	adds	r7, #76	; 0x4c
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	080026c8 	.word	0x080026c8
 8001e04:	080026d8 	.word	0x080026d8
 8001e08:	080026e4 	.word	0x080026e4
 8001e0c:	58004000 	.word	0x58004000

08001e10 <LL_RCC_LSE_IsEnabled>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <LL_RCC_LSE_IsEnabled+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_RCC_LSE_IsEnabled+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_RCC_LSE_IsReady>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d101      	bne.n	8001e4c <LL_RCC_LSE_IsReady+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_RCC_LSE_IsReady+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_SetRFWKPClockSource>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_SetSMPSClockSource>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_SetSMPSPrescaler>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_SetUSARTClockSource>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee4:	f023 0203 	bic.w	r2, r3, #3
 8001ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_SetLPUARTClockSource>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_SetI2CClockSource>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_RCC_SetLPTIMClockSource>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_SetSAIClockSource>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_SetRNGClockSource>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetCLK48ClockSource>:
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_SetUSBClockSource>:
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffe3 	bl	8001ff2 <LL_RCC_SetCLK48ClockSource>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LL_RCC_SetADCClockSource>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_RCC_SetRTCClockSource>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_RCC_GetRTCClockSource>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_ForceBackupDomainReset>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_RCC_PLLSAI1_Enable>:
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_PLLSAI1_Disable>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_PLLSAI1_IsReady>:
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002138:	d101      	bne.n	800213e <LL_RCC_PLLSAI1_IsReady+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b088      	sub	sp, #32
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002152:	2300      	movs	r3, #0
 8002154:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002156:	2300      	movs	r3, #0
 8002158:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d034      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216e:	d021      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002174:	d81b      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217a:	d01d      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800217c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002180:	d815      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218a:	d110      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800219c:	e00d      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f947 	bl	8002436 <RCCEx_PLLSAI1_ConfigNP>
 80021a8:	4603      	mov	r3, r0
 80021aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80021ac:	e005      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	77fb      	strb	r3, [r7, #31]
        break;
 80021b2:	e002      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fee8 	bl	8001f9a <LL_RCC_SetSAIClockSource>
 80021ca:	e001      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021cc:	7ffb      	ldrb	r3, [r7, #31]
 80021ce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d046      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80021dc:	f7ff ff56 	bl	800208c <LL_RCC_GetRTCClockSource>
 80021e0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d03c      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021ec:	f7fe fcaa 	bl	8000b44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff30 	bl	8002060 <LL_RCC_SetRTCClockSource>
 8002200:	e02e      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800220c:	f7ff ff4b 	bl	80020a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002210:	f7ff ff5a 	bl	80020c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800222c:	f7ff fdf0 	bl	8001e10 <LL_RCC_LSE_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d114      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002236:	f7fe f9c3 	bl	80005c0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800223c:	e00b      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe f9bf 	bl	80005c0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d902      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	77fb      	strb	r3, [r7, #31]
              break;
 8002254:	e004      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002256:	f7ff fded 	bl	8001e34 <LL_RCC_LSE_IsReady>
 800225a:	4603      	mov	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d1ee      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	77bb      	strb	r3, [r7, #30]
 8002264:	e001      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fe2a 	bl	8001ed4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe35 	bl	8001f00 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe5d 	bl	8001f66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fe52 	bl	8001f66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fe2a 	bl	8001f2c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fe1f 	bl	8001f2c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d022      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe8d 	bl	800201e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230c:	d107      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002326:	d10b      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f8dd 	bl	80024ec <RCCEx_PLLSAI1_ConfigNQ>
 8002332:	4603      	mov	r3, r0
 8002334:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002336:	7ffb      	ldrb	r3, [r7, #31]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800233c:	7ffb      	ldrb	r3, [r7, #31]
 800233e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d008      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235e:	d003      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe2a 	bl	8001fc6 <LL_RCC_SetRNGClockSource>
 8002372:	e00a      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fe21 	bl	8001fc6 <LL_RCC_SetRNGClockSource>
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff fe34 	bl	8001ff2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002392:	d107      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d022      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe3d 	bl	8002034 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c2:	d107      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023dc:	d10b      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8dd 	bl	80025a2 <RCCEx_PLLSAI1_ConfigNR>
 80023e8:	4603      	mov	r3, r0
 80023ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fd26 	bl	8001e58 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fd45 	bl	8001eac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd2c 	bl	8001e84 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800242c:	7fbb      	ldrb	r3, [r7, #30]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002442:	f7ff fe61 	bl	8002108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002446:	f7fe f8bb 	bl	80005c0 <HAL_GetTick>
 800244a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800244c:	e009      	b.n	8002462 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800244e:	f7fe f8b7 	bl	80005c0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d902      	bls.n	8002462 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e004      	b.n	800246c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002462:	f7ff fe60 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d137      	bne.n	80024e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002486:	4313      	orrs	r3, r2
 8002488:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249c:	4313      	orrs	r3, r2
 800249e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80024a0:	f7ff fe23 	bl	80020ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a4:	f7fe f88c 	bl	80005c0 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024aa:	e009      	b.n	80024c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ac:	f7fe f888 	bl	80005c0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	73fb      	strb	r3, [r7, #15]
        break;
 80024be:	e004      	b.n	80024ca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024c0:	f7ff fe31 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d1f0      	bne.n	80024ac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d108      	bne.n	80024e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024de:	4313      	orrs	r3, r2
 80024e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024f8:	f7ff fe06 	bl	8002108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024fc:	f7fe f860 	bl	80005c0 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002502:	e009      	b.n	8002518 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7fe f85c 	bl	80005c0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e004      	b.n	8002522 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002518:	f7ff fe05 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d137      	bne.n	8002598 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253c:	4313      	orrs	r3, r2
 800253e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	4313      	orrs	r3, r2
 8002554:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002556:	f7ff fdc8 	bl	80020ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255a:	f7fe f831 	bl	80005c0 <HAL_GetTick>
 800255e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002560:	e009      	b.n	8002576 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002562:	f7fe f82d 	bl	80005c0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d902      	bls.n	8002576 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	73fb      	strb	r3, [r7, #15]
        break;
 8002574:	e004      	b.n	8002580 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002576:	f7ff fdd6 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d1f0      	bne.n	8002562 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80025ae:	f7ff fdab 	bl	8002108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025b2:	f7fe f805 	bl	80005c0 <HAL_GetTick>
 80025b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025b8:	e009      	b.n	80025ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ba:	f7fe f801 	bl	80005c0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e004      	b.n	80025d8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025ce:	f7ff fdaa 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d137      	bne.n	800264e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002608:	4313      	orrs	r3, r2
 800260a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800260c:	f7ff fd6d 	bl	80020ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fd ffd6 	bl	80005c0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002616:	e009      	b.n	800262c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002618:	f7fd ffd2 	bl	80005c0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	73fb      	strb	r3, [r7, #15]
        break;
 800262a:	e004      	b.n	8002636 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800262c:	f7ff fd7b 	bl	8002126 <LL_RCC_PLLSAI1_IsReady>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d1f0      	bne.n	8002618 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d108      	bne.n	800264e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800264a:	4313      	orrs	r3, r2
 800264c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <memset>:
 8002658:	4402      	add	r2, r0
 800265a:	4603      	mov	r3, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4d0d      	ldr	r5, [pc, #52]	; (80026a0 <__libc_init_array+0x38>)
 800266c:	4c0d      	ldr	r4, [pc, #52]	; (80026a4 <__libc_init_array+0x3c>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	2600      	movs	r6, #0
 8002674:	42a6      	cmp	r6, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	4d0b      	ldr	r5, [pc, #44]	; (80026a8 <__libc_init_array+0x40>)
 800267a:	4c0c      	ldr	r4, [pc, #48]	; (80026ac <__libc_init_array+0x44>)
 800267c:	f000 f818 	bl	80026b0 <_init>
 8002680:	1b64      	subs	r4, r4, r5
 8002682:	10a4      	asrs	r4, r4, #2
 8002684:	2600      	movs	r6, #0
 8002686:	42a6      	cmp	r6, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002690:	4798      	blx	r3
 8002692:	3601      	adds	r6, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	f855 3b04 	ldr.w	r3, [r5], #4
 800269a:	4798      	blx	r3
 800269c:	3601      	adds	r6, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	08002774 	.word	0x08002774
 80026a4:	08002774 	.word	0x08002774
 80026a8:	08002774 	.word	0x08002774
 80026ac:	08002778 	.word	0x08002778

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
